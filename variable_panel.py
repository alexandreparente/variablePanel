# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VariablePanel
                                 A QGIS plugin
 The VariablePanel plugin displays project variables in a dedicated QGIS panel, allowing for easy access
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-16
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Alexandre Parente Lima
        email                : alexandre.parente@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QTimer, QSettings, QTranslator, QLocale ,QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from .variable_panel_dockwidget import VariablePanelDockWidget
from .resources import *

import os.path

class VariablePanel:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # Gets the locale configured in the system.
        self.settings = QSettings()
        locale = self.settings.value("locale/userLocale", QLocale.system().name())

        # Initialize locale
        locale_path = os.path.join(self.plugin_dir, 'i18n', 'VariablePanel_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(f'&Variable Panel')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar('VariablePanel')
        self.toolbar.setObjectName('VariablePanel')

        self.dockwidget = None
        self.sideDockWidgetArea = Qt.RightDockWidgetArea

    def tr(self,string):
        return QCoreApplication.translate('VariablePanel', string)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
        checkable=True):

        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        #Makes the button checkable
        action.setCheckable(checkable)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        #Create the menu entries and toolbar icons inside the QGIS GUI.
        icon_path = ':/plugins/variable_panel/mIconExpression.svg'
        self.add_action(
            icon_path,
            text=self.tr(f'Variable Panel'),
            callback=self.toggleDockWidgetVisibility,
            parent=self.iface.mainWindow())
        print(f"0")

        self.initDockWidget(self.sideDockWidgetArea)
        self.dockwidget.hide()

    def unload(self):
        #Removes the plugin menu item and icon from QGIS GUI.
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(f'&Variable Panel'),action)
            self.iface.removeToolBarIcon(action)
            # remove the toolbar
        del self.toolbar

    def toggleDockWidgetVisibility(self):
        if self.dockwidget is None:
             self.initDockWidget(self.sideDockWidgetArea)
             # Ensure that the dock widget moves to the top.
             self.dockwidget.show()
             self.dockwidget.raise_()
             print(f"1")
        else:
            if self.dockwidget.isVisible():
                self.dockwidget.show()
                # Ensure that the dock widget moves to the top.
                self.dockwidget.raise_()
                print(f"2")
            else:
                self.dockwidget.close()
                print(f"3")

    def initDockWidget(self, sideDockWidgetArea):

        self.dockwidget = VariablePanelDockWidget()

        self.dockwidget.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)

        self.dockwidget.setFloating(False)

        # Adds the dockwidget to the interface
        self.iface.addDockWidget(self.sideDockWidgetArea, self.dockwidget)

        # Pass an empty list for tabification as no other dockwidgets are targeted
        self.iface.addTabifiedDockWidget(self.sideDockWidgetArea, self.dockwidget, [], True)

        # Synchronizes the dock with the toolbar button
        self.dockwidget.setToggleVisibilityAction(self.actions[0])

        # Connects the signal to monitor when the dock closes
        self.dockwidget.closed.connect(self.onDockWidgetClosed)

        self.dockwidget.dockLocationChanged.connect(self.onDockLocationChanged)

    def onDockWidgetClosed(self):

        self.dockwidget.closed.disconnect(self.onDockWidgetClosed)
        # Delays the redefinition of `self.dockwidget` to avoid conflicts with pending Qt events
        QTimer.singleShot(0, lambda: setattr(self, 'dockwidget', None))

    def onDockLocationChanged(self,area):
        self.sideDockWidgetArea = area

